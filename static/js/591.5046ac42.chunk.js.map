{"version":3,"file":"static/js/591.5046ac42.chunk.js","mappings":"4HAaA,IAbqB,SAAC,GAA+B,IAA9BA,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,IAE3C,OAAO,iBAAKC,UAAU,4CAAf,WACC,wBAAKH,KACL,gBAAKG,UAAU,qCAAf,UACA,kBACAA,UAAWD,EACXD,YAAaA,W,4ICsFrB,UApFoB,WAChB,IAAMG,GAAaC,EAAAA,EAAAA,UACbC,GAAeD,EAAAA,EAAAA,SAAO,GACtBE,GAAmBF,EAAAA,EAAAA,SAAO,GAChC,GAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAsB,kBACtBC,GAAkBC,EAAAA,EAAAA,KA0DxB,OACA,UAAC,IAAD,YACI,SAAC,IAAD,CAAcf,MAAM,UAAUC,YAAY,UAAUC,IAAKW,KACzD,SAAC,IAAD,CAAcb,MAAM,OAAOC,YAAY,OAAOC,IAAKW,KACnD,SAAC,IAAD,CAAcb,MAAM,SAASC,YAAY,SAASC,IAAKW,KACvD,SAAC,IAAD,CAAcb,MAAM,WAAWC,YAAY,WAAWC,IAAKW,IAC1DJ,IAAS,qCAAG,kBAAH,KAAU,gBAAKN,UAAS,gBAAWM,EAAM,IAAMO,KAAK,QAA1C,SAChBP,EAAM,KADA,QAGV,iBAAKN,UAAU,OAAf,WACI,mBAAQc,KAAK,SAASd,UAAU,qCAAqCe,QAAS,kBAlElE,WAChBR,EAAS,IACT,IAAMS,EAAWC,SAASC,uBAAuBR,GACjDS,MAAMC,UAAUC,MAAMC,KAAMN,GAAWO,SAAQ,SAAAC,GAC3CA,EAAQC,MAAQ,MA8DoEC,IAApF,sBACA,mBAAQ1B,UAAU,iCAAiCe,QAAS,kBA3DhD,WAChB,IAAMC,EAAWC,SAASC,uBAAuBR,GAoBjD,GAnBAP,EAAawB,SAAU,EACvBvB,EAAiBuB,SAAU,EAI3BR,MAAMC,UAAUC,MAAMC,KAAMN,GAAWO,SAAQ,SAAAC,GAChB,YAAxBA,EAAQ1B,cACPG,EAAW0B,QAAUH,EAAQC,OAEZ,KAAlBD,EAAQC,QACNtB,EAAawB,SAAU,MAK5BhB,EAAgBV,EAAW0B,WAC3BvB,EAAiBuB,SAAU,GAG5BxB,EAAawB,QACZpB,EAAS,CAAC,0BAA2B,sBAEpC,GAAGH,EAAiBuB,QACrBpB,EAAS,CAAC,4DAA6D,qBAGvE,CACA,IAAMqB,EAAcT,MAAMC,UAAUC,MAAMC,KAAMN,GAAWa,KAAI,SAAAL,GAC3D,IAAMM,EAAcN,EAAQC,MAE5B,OADAD,EAAQC,MAAQ,GACTK,KAELC,EAAW,CACbC,QAASJ,EAAY,GACrBK,KAAML,EAAY,GAClBM,OAAQN,EAAY,GACpBO,QAASP,EAAY,GACrBQ,OAAQ,SACRC,GAAIC,GAAAA,IAER9B,GAAS+B,EAAAA,EAAAA,IAAYR,IACrBxB,EAAS,CAAC,8BAA+B,mBAgByBiC,IAAlE,0B,iBClDZC,EAAOC,QA9BP,WAoBE,IAnBA,IAAMC,EAAY,CAChB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEEL,EAAO,GACFM,EAAI,EAAGA,EAAI,GAAIA,IAEpBN,EAAKM,GADG,IAANA,GAAiB,KAANA,GAAkB,KAANA,GAAkB,KAANA,EAC3B,IAEAD,EAAUE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,OAAS,IAGtE,OAAOV,EAAKW,KAAK","sources":["components/RenderFields.js","pages/AddLocation.js","../node_modules/react-uuid/uuid.js"],"sourcesContent":["const RenderFields = ({title, placeholder, cls}) => {\r\n\r\nreturn(<div className=\"d-flex flex-column align-items-start mt-4\">\r\n        <h6>{title}</h6>\r\n        <div className=\"border rounded-3 p-1 ps-2 width-70\">\r\n        <input\r\n        className={cls}\r\n        placeholder={placeholder}\r\n        />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default RenderFields","import { useRef, useState } from \"react\"\r\nimport { Container } from \"react-bootstrap\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setLocation } from \"../store/actionCreators/locationAction\"\r\nimport uuid from 'react-uuid'\r\nimport RenderFields from \"../components/RenderFields\"\r\nimport useValidateCountry from \"../components/hooks/useValidateCountry\"\r\n\r\n\r\nconst AddLocation = () => {\r\n    const countryRef = useRef()\r\n    const emptyMessage = useRef(false)\r\n    const countryNameError = useRef(false)\r\n    const [alert, setAlert] = useState('');\r\n    const dispatch = useDispatch()\r\n    const inputFieldClassName = 'input-field-cls'\r\n    const validateCountry = useValidateCountry()\r\n\r\n    const handleClear = () => {\r\n        setAlert('')\r\n        const elements = document.getElementsByClassName(inputFieldClassName)\r\n        Array.prototype.slice.call( elements ).forEach(element => {\r\n            element.value = ''\r\n        });\r\n    }\r\n\r\n    const handleClick = () => {\r\n        const elements = document.getElementsByClassName(inputFieldClassName)\r\n        emptyMessage.current = false\r\n        countryNameError.current = false\r\n\r\n       \r\n        //to check if any field is empty\r\n        Array.prototype.slice.call( elements ).forEach(element => {\r\n            if(element.placeholder === 'country'){\r\n                countryRef.current = element.value\r\n            }\r\n            if(element.value === ''){\r\n                 emptyMessage.current = true\r\n            }\r\n        });\r\n\r\n         //to validate country name\r\n        if(!validateCountry(countryRef.current)){      \r\n            countryNameError.current = true\r\n        }\r\n        //setAlert if any field is empty\r\n        if(emptyMessage.current){\r\n            setAlert(['All fields are required', 'alert-danger'])\r\n        }\r\n        else if(countryNameError.current){\r\n            setAlert(['Country does not exist, please type a valid country name.', 'alert-danger'])\r\n        }\r\n        //if not empty then save all the data\r\n        else{\r\n            const inputValues = Array.prototype.slice.call( elements ).map(element => {\r\n                const new_element = element.value\r\n                element.value = ''\r\n                return new_element\r\n            })\r\n            const location = {\r\n                country: inputValues[0],\r\n                city: inputValues[1],\r\n                street: inputValues[2],\r\n                zipCode: inputValues[3],\r\n                status: 'ACTIVE',\r\n                id: uuid()\r\n            }\r\n            dispatch(setLocation(location))\r\n            setAlert(['Location added successfully', 'alert-success'])\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n    <Container>\r\n        <RenderFields title=\"Country\" placeholder=\"country\" cls={inputFieldClassName} />\r\n        <RenderFields title=\"City\" placeholder=\"city\" cls={inputFieldClassName} />\r\n        <RenderFields title=\"Street\" placeholder=\"street\" cls={inputFieldClassName} />\r\n        <RenderFields title=\"Zip Code\" placeholder=\"zip code\" cls={inputFieldClassName}  />\r\n        {alert && <> <br /> <div className={`alert ${alert[1]}`} role=\"alert\">\r\n           {alert[0]}\r\n        </div> </> }\r\n        <div className=\"mt-3\">\r\n            <button type=\"button\" className=\"btn btn-danger me-2 ps-3 pe-3 mt-2\" onClick={() => handleClear()}> Clear </button>\r\n            <button className=\"btn btn-primary ps-3 pe-3 mt-2\" onClick={() => handleClick()}>Save</button>\r\n        </div>\r\n    </Container>)\r\n}\r\n\r\n\r\n\r\n\r\nexport default AddLocation\r\n\r\n","/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n  ]\n  let uuid = []\n  for (let i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-'\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join('')\n}\n\nmodule.exports = uuid\n"],"names":["title","placeholder","cls","className","countryRef","useRef","emptyMessage","countryNameError","useState","alert","setAlert","dispatch","useDispatch","inputFieldClassName","validateCountry","useValidateCountry","role","type","onClick","elements","document","getElementsByClassName","Array","prototype","slice","call","forEach","element","value","handleClear","current","inputValues","map","new_element","location","country","city","street","zipCode","status","id","uuid","setLocation","handleClick","module","exports","hashTable","i","Math","floor","random","length","join"],"sourceRoot":""}