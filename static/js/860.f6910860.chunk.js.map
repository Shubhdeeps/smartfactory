{"version":3,"file":"static/js/860.f6910860.chunk.js","mappings":"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","sources":["components/RenderFields.js","pages/NewFactory.js","../node_modules/react-uuid/uuid.js"],"sourcesContent":["const RenderFields = ({title, placeholder, cls}) => {\r\n\r\nreturn(<div className=\"d-flex flex-column align-items-start mt-4\">\r\n        <h6>{title}</h6>\r\n        <div className=\"border rounded-3 p-1 ps-2 width-70\">\r\n        <input\r\n        className={cls}\r\n        placeholder={placeholder}\r\n        />\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default RenderFields","import { useRef, useState } from \"react\"\r\nimport { Container, Dropdown, DropdownButton } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport FactoryStatus from \"../components/FactoryStatus\"\r\nimport RenderFields from \"../components/RenderFields\"\r\nimport { setFactory } from \"../store/actionCreators/factoryAction\"\r\nimport uuid from 'react-uuid'\r\n\r\nconst NewFactory = () => {\r\n    const statusRef = useRef('Idle')\r\n    const [location, setLocation] = useState('')\r\n    const allLocation = useSelector(s => s.locations).locations\r\n\r\n    const emptyMessage = useRef(false)\r\n    const dispatch = useDispatch()\r\n    const [alert, setAlert] = useState('');\r\n    const inputFieldClassName = 'input-field-new-factory'\r\n\r\n    const handleClear = () => {\r\n        setAlert('')\r\n        const elements = document.getElementsByClassName(inputFieldClassName)\r\n        Array.prototype.slice.call( elements ).forEach(element => {\r\n            element.value = ''\r\n        });\r\n    }\r\n\r\n    const handleClick = () => {\r\n        const elements = document.getElementsByClassName(inputFieldClassName)\r\n        emptyMessage.current = false\r\n        //to check if any field is empty\r\n        Array.prototype.slice.call( elements ).forEach(element => {\r\n            if(element.value === ''){\r\n                 emptyMessage.current = true\r\n            }\r\n        });\r\n        \r\n        //setAlert if any field is empty\r\n        if(emptyMessage.current || !location){\r\n            setAlert('All fields are required')\r\n        }\r\n        //if not empty then save all the data\r\n        else{\r\n            setAlert('')\r\n            const inputValues = Array.prototype.slice.call( elements ).map(element => {\r\n                const new_element = element.value\r\n                element.value = ''\r\n               return new_element\r\n            })\r\n            const factoryData = {\r\n                name: inputValues[0],\r\n                description: inputValues[1],\r\n                lat: inputValues[2],\r\n                lon: inputValues[3],\r\n                status: statusRef.current,\r\n                location,\r\n                id: uuid()\r\n            }\r\n            dispatch(setFactory(factoryData))\r\n        }\r\n    }\r\n\r\n    return(\r\n    <Container>\r\n        <RenderFields title=\"Name\" placeholder=\"name\"  cls={inputFieldClassName} />\r\n        <RenderFields title=\"Description\" placeholder=\"description\"  cls={inputFieldClassName} />\r\n        <RenderFields title=\"Latitude\" placeholder=\"latitude\"  cls={inputFieldClassName}  />\r\n        <RenderFields title=\"Longitude\" placeholder=\"longitude\"  cls={inputFieldClassName}  />\r\n        <FactoryStatus statusRef={statusRef} defaultChecked='IDLE'/>\r\n        <DropdownButton\r\n        variant=\"outline-secondary\"\r\n        title={location ? `${location.city}, ${location.country.toUpperCase()}` : 'Select a location'}\r\n        className=\"mt-3\"\r\n        >\r\n            {allLocation.map(loc => {\r\n                if(loc['status'] === 'DEACTIVATED'){\r\n                    return null\r\n                }\r\n                return <Dropdown.Item key={loc['id']} onClick={() => setLocation(loc)}> {loc.street}, {loc.city}, {loc.country.toUpperCase()} </Dropdown.Item>\r\n            })}\r\n        </DropdownButton>\r\n        {alert && <> <br /> <div className=\"alert alert-danger\" role=\"alert\">\r\n           {alert}\r\n        </div> </> }\r\n        <div className=\"mt-3\">\r\n            <button type=\"button\" className=\"btn btn-danger me-2 ps-3 pe-3 mt-2\" onClick={() => handleClear()}> Clear </button>\r\n            <button className=\"btn btn-primary ps-3 pe-3 mt-2\" onClick={() => handleClick()}>Save</button>\r\n        </div>\r\n    </Container>)\r\n}\r\n\r\n\r\nexport default NewFactory","/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9'\n  ]\n  let uuid = []\n  for (let i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-'\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join('')\n}\n\nmodule.exports = uuid\n"],"names":["title","placeholder","cls","className","statusRef","useRef","useState","location","setLocation","allLocation","useSelector","s","locations","emptyMessage","dispatch","useDispatch","alert","setAlert","inputFieldClassName","defaultChecked","variant","city","country","toUpperCase","map","loc","onClick","street","role","type","elements","document","getElementsByClassName","Array","prototype","slice","call","forEach","element","value","handleClear","current","inputValues","new_element","factoryData","name","description","lat","lon","status","id","uuid","setFactory","handleClick","module","exports","hashTable","i","Math","floor","random","length","join"],"sourceRoot":""}